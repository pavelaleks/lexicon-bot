import pytest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import User
from handlers.exam import handle_exam_check, ExamStates

class DummyMessage:
    def __init__(self):
        self.from_user = User(id=123, is_bot=False, first_name="–¢–µ—Å—Ç")
        self.chat = type("Chat", (), {"id": 123, "type": "private"})()

    async def answer(self, text, **kwargs):
        print("–û—Ç–≤–µ—Ç –±–æ—Ç–∞:", text)

class DummyCallback:
    def __init__(self, data="check"):
        self.data = data
        self.from_user = User(id=123, is_bot=False, first_name="–¢–µ—Å—Ç")
        self.message = DummyMessage()

    async def answer(self, text=None, show_alert=False):
        print("ALERT:", text)

@pytest.mark.asyncio
async def test_handle_exam_check_correct_and_incorrect(capsys):
    storage = MemoryStorage()
    state = FSMContext(storage=storage, key=("user", 123))

    tasks = [{"Question": "–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è?", "Answer": "1", "Topic": "–¢–∏—Ä–µ"}]
    cb = DummyCallback()

    # ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    await state.update_data(tasks=tasks, index=0, selected=["1"], answers=[], deadline=9999999999)
    await state.set_state(ExamStates.answering)
    await handle_exam_check(cb, state)
    captured = capsys.readouterr()
    assert "–ü—Ä–∞–≤–∏–ª—å–Ω–æ" in captured.out or "‚úÖ" in captured.out

    # ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    await state.update_data(tasks=tasks, index=0, selected=["2"], answers=[], deadline=9999999999)
    await state.set_state(ExamStates.answering)  # üí° –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
    await handle_exam_check(cb, state)
    captured = capsys.readouterr()
    assert "–ù–µ–≤–µ—Ä–Ω–æ" in captured.out or "‚ùå" in captured.out
