from typing import Union

from aiogram import types, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from services.stats import get_stats

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_username(user: types.User) -> str:
    return (
        user.full_name
        or user.username
        or f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
    )

# --- –°–ø—Ä–∞–≤–∫–∞ ---
async def cmd_help(message: types.Message):
    name = get_username(message.from_user)
    text = (
        f"‚ùì *–ü–æ–º–æ—â—å –¥–ª—è {name}*\n\n"
        "–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ó–∞–¥–∞–Ω–∏—è 5 –û–ì–≠: –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ä–µ–∂–∏–º –∏ —Ä–µ—à–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è!\n\n"
        "*üß© –†–µ–∂–∏–º ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª* ‚Äî –∫–æ–º–∞–Ω–¥–∞ /train –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª:\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–¢–∏—Ä–µ¬ª).\n"
        "2. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.\n"
        "3. –ù–∞–∂–∏–º–∞–π—Ç–µ —Ü–∏—Ñ—Ä—ã ‚Äî —ç—Ç–æ –ø–æ–∑–∏—Ü–∏–∏, –≥–¥–µ –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è.\n"
        "4. –ñ–º–∏—Ç–µ ‚úÖ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç.\n"
        "5. –ó–∞—Ç–µ–º ‚Äî ¬´–°–ª–µ–¥—É—é—â–µ–µ¬ª –∏–ª–∏ ¬´–ö —Ç–µ–º–∞–º¬ª.\n\n"
        "*üìù –†–µ–∂–∏–º ¬´–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è¬ª* ‚Äî –∫–æ–º–∞–Ω–¥–∞ /exam –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´üìù –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è¬ª:\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ: 5, 10, 20 –∏–ª–∏ 50 –∑–∞–¥–∞–Ω–∏–π.\n"
        "2. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∏—Ö –ø–æ–¥—Ä—è–¥, —É –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
        "3. –í –∫–æ–Ω—Ü–µ –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Ç–µ–º—ã, –≥–¥–µ –±—ã–ª–∏ –æ—à–∏–±–∫–∏.\n\n"
        "üìå *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /train ‚Äî —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ —Ç–µ–º–∞–º\n"
        "‚Ä¢ /exam ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –Ω–∞ –≤—Ä–µ–º—è\n"
        "‚Ä¢ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–≤—ã –∑–¥–µ—Å—å!)\n"
        "‚Ä¢ /stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "‚Ä¢ /start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–∞—á–∞–ª–∞\n\n"
        "–£–¥–∞—á–∏ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ! üöÄ"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ", callback_data="go:train")],
        [InlineKeyboardButton(text="üìù –ö –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π", callback_data="go:exam")]
    ])

    await message.answer(text, parse_mode="Markdown", reply_markup=kb)

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
async def cmd_stats(event: Union[types.Message, types.CallbackQuery]):
    user = event.from_user
    user_id = user.id
    display_name = get_username(user)

    stats = await get_stats(user_id=user_id)
    train_done = stats.get("train_done", 0)
    exam_done = stats.get("exam_done", 0)

    text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {display_name}:*\n\n"
        f"‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ: {train_done}\n"
        f"‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {exam_done}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
    )

    if isinstance(event, types.Message):
        await event.answer(text, parse_mode="Markdown")
    else:
        await event.message.answer(text, parse_mode="Markdown")
        await event.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ ---
async def help_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "go:train":
        from handlers.train import cmd_train
        await cmd_train(callback.message, state)
    elif callback.data == "go:exam":
        from handlers.exam import cmd_exam
        await cmd_exam(callback.message, state)
    elif callback.data == "help:menu":
        await cmd_help(callback.message)
    elif callback.data == "stats:show":
        await cmd_stats(callback)
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª.")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
def register_common(dp: Dispatcher):
    dp.message.register(cmd_help, Command(commands=["help"]))
    dp.message.register(cmd_help, F.text == "‚ùì –ü–æ–º–æ—â—å")
    dp.message.register(cmd_stats, Command(commands=["stats"]))
    dp.message.register(cmd_stats, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    dp.callback_query.register(help_callback, F.data.startswith("go:"))
    dp.callback_query.register(help_callback, F.data == "help:menu")
    dp.callback_query.register(help_callback, F.data == "stats:show")

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

async def handle_out_of_state(callback: CallbackQuery, state: FSMContext):
    await callback.answer(
        "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª –∏–ª–∏ ¬´–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è¬ª.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        show_alert=True
    )