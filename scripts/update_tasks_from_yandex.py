#!/usr/bin/env python3
# scripts/update_tasks_from_yandex.py

import os
import csv
import requests
from pathlib import Path

# -------------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π—Ç–µ:
# 1) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –≤–∞—à–µ–π –Ø–Ω–¥–µ–∫—Å-—Ç–∞–±–ª–∏—Ü—ã –≤ CSV (—Å–º. –Ω–∏–∂–µ)
# 2) –ó–∞–¥–∞–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_CSV_URL
# -------------------------------------------------------------------
YANDEX_CSV_URL = os.getenv("YANDEX_CSV_URL")

if not YANDEX_CSV_URL:
    print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ URL —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é YANDEX_CSV_URL")
    print("   export YANDEX_CSV_URL='https://docs.yandex.ru/spreadsheets/export?format=csv&table=...'")
    exit(1)

def fetch_remote_csv(url: str) -> list[str]:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç CSV –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫.
    """
    resp = requests.get(url)
    resp.raise_for_status()
    text = resp.text
    # –†–∞–∑–±–∏—Ä–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–µ—Ä–µ–Ω–æ—Å—ã
    return text.splitlines()

def build_tasks_csv(lines: list[str], out_path: Path):
    """
    –ü–∞—Ä—Å–∏—Ç –≤—Ö–æ–¥–Ω–æ–π CSV –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏: Topic,Question,Answer
    """
    reader = csv.DictReader(lines)
    expected = {"Topic", "Question", "Answer"}
    if set(reader.fieldnames or []) != expected:
        raise ValueError(
            f"–û–∂–∏–¥–∞–ª–∏—Å—å –∫–æ–ª–æ–Ω–∫–∏ {expected}, –∞ –ø—Ä–∏—à–ª–∏ {reader.fieldnames}"
        )

    out_path.parent.mkdir(parents=True, exist_ok=True)
    with out_path.open("w", encoding="utf-8", newline="") as fout:
        writer = csv.writer(fout)
        # –®–∞–ø–∫–∞
        writer.writerow(["Topic", "Question", "Answer"])
        for row in reader:
            topic    = row["Topic"].strip()
            question = row["Question"].strip()
            answer   = row["Answer"].strip()
            if topic and question and answer:
                writer.writerow([topic, question, answer])

    print(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω {out_path}")

def main():
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º CSV –∏–∑ –Ø–Ω–¥–µ–∫—Å-—Ç–∞–±–ª–∏—Ü—ã‚Ä¶")
    lines = fetch_remote_csv(YANDEX_CSV_URL)
    build_tasks_csv(lines, Path("data/tasks.csv"))

if __name__ == "__main__":
    main()
